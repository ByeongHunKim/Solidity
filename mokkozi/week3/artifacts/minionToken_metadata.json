{
	"compiler": {
		"version": "0.8.7+commit.e28d00a7"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "owner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "approved",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					}
				],
				"name": "Approval",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "owner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "operator",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "bool",
						"name": "approved",
						"type": "bool"
					}
				],
				"name": "ApprovalForAll",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					}
				],
				"name": "Transfer",
				"type": "event"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "approved",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					}
				],
				"name": "approve",
				"outputs": [],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "owner",
						"type": "address"
					}
				],
				"name": "balanceOf",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					}
				],
				"name": "getApproved",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "owner",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "operator",
						"type": "address"
					}
				],
				"name": "isApprovedForAll",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					},
					{
						"internalType": "string",
						"name": "uri",
						"type": "string"
					}
				],
				"name": "mint",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "name",
				"outputs": [
					{
						"internalType": "string",
						"name": "_name",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					}
				],
				"name": "ownerOf",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					}
				],
				"name": "safeTransferFrom",
				"outputs": [],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					},
					{
						"internalType": "bytes",
						"name": "data",
						"type": "bytes"
					}
				],
				"name": "safeTransferFrom",
				"outputs": [],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "operator",
						"type": "address"
					},
					{
						"internalType": "bool",
						"name": "approved",
						"type": "bool"
					}
				],
				"name": "setApprovalForAll",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					},
					{
						"internalType": "string",
						"name": "uri",
						"type": "string"
					}
				],
				"name": "setTokenURI",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes4",
						"name": "interfaceID",
						"type": "bytes4"
					}
				],
				"name": "supportsInterface",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "symbol",
				"outputs": [
					{
						"internalType": "string",
						"name": "_symbol",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "tokenName",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "tokenSymbol",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_tokenId",
						"type": "uint256"
					}
				],
				"name": "tokenURI",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					}
				],
				"name": "transferFrom",
				"outputs": [],
				"stateMutability": "payable",
				"type": "function"
			}
		],
		"devdoc": {
			"kind": "dev",
			"methods": {
				"approve(address,uint256)": {
					"details": "The zero address indicates there is no approved address.  Throws unless `msg.sender` is the current NFT owner, or an authorized  operator of the current owner.",
					"params": {
						"approved": "The new approved NFT controller",
						"tokenId": "The NFT to approve"
					}
				},
				"balanceOf(address)": {
					"details": "NFTs assigned to the zero address are considered invalid, and this  function throws for queries about the zero address.",
					"params": {
						"owner": "An address for whom to query the balance"
					},
					"returns": {
						"_0": "The number of NFTs owned by `_owner`, possibly zero"
					}
				},
				"getApproved(uint256)": {
					"details": "Throws if `_tokenId` is not a valid NFT.",
					"params": {
						"tokenId": "The NFT to find the approved address for"
					},
					"returns": {
						"_0": "The approved address for this NFT, or the zero address if there is none"
					}
				},
				"isApprovedForAll(address,address)": {
					"params": {
						"operator": "The address that acts on behalf of the owner",
						"owner": "The address that owns the NFTs"
					},
					"returns": {
						"_0": "True if `_operator` is an approved operator for `_owner`, false otherwise"
					}
				},
				"ownerOf(uint256)": {
					"details": "NFTs assigned to zero address are considered invalid, and queries  about them do throw.",
					"params": {
						"tokenId": "The identifier for an NFT"
					},
					"returns": {
						"_0": "The address of the owner of the NFT"
					}
				},
				"safeTransferFrom(address,address,uint256)": {
					"details": "This works identically to the other function with an extra data parameter,  except this function just sets data to \"\".",
					"params": {
						"from": "The current owner of the NFT",
						"to": "The new owner",
						"tokenId": "The NFT to transfer"
					}
				},
				"safeTransferFrom(address,address,uint256,bytes)": {
					"details": "Throws unless `msg.sender` is the current owner, an authorized  operator, or the approved address for this NFT. Throws if `_from` is  not the current owner. Throws if `_to` is the zero address. Throws if  `_tokenId` is not a valid NFT. When transfer is complete, this function  checks if `_to` is a smart contract (code size > 0). If so, it calls  `onERC721Received` on `_to` and throws if the return value is not  `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`.",
					"params": {
						"data": "Additional data with no specified format, sent in call to `_to`",
						"from": "The current owner of the NFT",
						"to": "The new owner",
						"tokenId": "The NFT to transfer"
					}
				},
				"setApprovalForAll(address,bool)": {
					"details": "Emits the ApprovalForAll event. The contract MUST allow  multiple operators per owner.",
					"params": {
						"approved": "True if the operator is approved, false to revoke approval",
						"operator": "Address to add to the set of authorized operators"
					}
				},
				"supportsInterface(bytes4)": {
					"details": "Interface identification is specified in ERC-165. This function  uses less than 30,000 gas.",
					"params": {
						"interfaceID": "The interface identifier, as specified in ERC-165"
					},
					"returns": {
						"_0": "`true` if the contract implements `interfaceID` and  `interfaceID` is not 0xffffffff, `false` otherwise"
					}
				},
				"tokenURI(uint256)": {
					"details": "Throws if `_tokenId` is not a valid NFT. URIs are defined in RFC  3986. The URI may point to a JSON file that conforms to the \"ERC721  Metadata JSON Schema\"."
				},
				"transferFrom(address,address,uint256)": {
					"details": "Throws unless `msg.sender` is the current owner, an authorized  operator, or the approved address for this NFT. Throws if `_from` is  not the current owner. Throws if `_to` is the zero address. Throws if  `_tokenId` is not a valid NFT.",
					"params": {
						"from": "The current owner of the NFT",
						"to": "The new owner",
						"tokenId": "The NFT to transfer"
					}
				}
			},
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {
				"approve(address,uint256)": {
					"notice": "Change or reaffirm the approved address for an NFT"
				},
				"balanceOf(address)": {
					"notice": "Count all NFTs assigned to an owner"
				},
				"getApproved(uint256)": {
					"notice": "Get the approved address for a single NFT"
				},
				"isApprovedForAll(address,address)": {
					"notice": "Query if an address is an authorized operator for another address"
				},
				"name()": {
					"notice": "A descriptive name for a collection of NFTs in this contract"
				},
				"ownerOf(uint256)": {
					"notice": "Find the owner of an NFT"
				},
				"safeTransferFrom(address,address,uint256)": {
					"notice": "Transfers the ownership of an NFT from one address to another address"
				},
				"safeTransferFrom(address,address,uint256,bytes)": {
					"notice": "Transfers the ownership of an NFT from one address to another address"
				},
				"setApprovalForAll(address,bool)": {
					"notice": "Enable or disable approval for a third party (\"operator\") to manage  all of `msg.sender`'s assets"
				},
				"supportsInterface(bytes4)": {
					"notice": "Query if a contract implements an interface"
				},
				"symbol()": {
					"notice": "An abbreviated name for NFTs in this contract"
				},
				"tokenURI(uint256)": {
					"notice": "A distinct Uniform Resource Identifier (URI) for a given asset."
				},
				"transferFrom(address,address,uint256)": {
					"notice": "Transfer ownership of an NFT -- THE CALLER IS RESPONSIBLE  TO CONFIRM THAT `_to` IS CAPABLE OF RECEIVING NFTS OR ELSE  THEY MAY BE PERMANENTLY LOST"
				}
			},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"mokkozi/week3/erc721.sol": "minionToken"
		},
		"evmVersion": "london",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"mokkozi/week3/erc721.sol": {
			"keccak256": "0x3b0183a6540188877dee3465449284cd073fdca19287e7c20894dd9d0e550c71",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://7a8d378c2f9f3956567318f77ec352b6d4d351fee2689c5a2af46e09b50c43f6",
				"dweb:/ipfs/QmQWZjdvZCVSMrRmdQnQbmzJGMEU2eGyVneRw3Kv4byQfC"
			]
		}
	},
	"version": 1
}